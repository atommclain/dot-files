# https://git-scm.com/docs/git-config
[user]
	name = Adam McLain
	email = atommclain@gmail.com
[core]
	excludesfile = ~/.gitignore_global
	autocrlf = input
	safecrlf = true
	whitespace = trailing-space,space-before-tab,tab-in-indent
	attributesfile = ~/.gitattributes
[init]
	templateDir = ~/.git_template
	defaultBranch = trunk
[advice]
	statusHints = false
[blame]
	#date = format:%Y-%m-%d %H:%M
	#coloring = highlightRecent
[branch]
	autosetuprebase = always
[color]
	diff = auto
	status = auto
	branch = auto
	ui = auto
[color "blame"]
    highlightRecent = 237, 20 month ago, 238, 19 month ago, 239, 18 month ago, 240, 17 month ago, 241, 16 month ago, 242, 15 month ago, 243, 14 month ago, 244, 13 month ago, 245, 12 month ago, 246, 11 month ago, 247, 10 month ago, 248, 9 month ago, 249, 8 month ago, 250, 7 month ago, 251, 6 month ago, 252, 5 month ago, 253, 4 month ago, 254, 3 month ago, 231, 2 month ago, 230, 1 month ago, 229, 3 weeks ago, 228, 2 weeks ago, 227, 1 week ago, 226
[color "diff"]
	meta = white
	frag = white
	new = green
[color "status"]
	branch = yellow
	upstream = bold blue
[commit]
	verbose = true
	gpgsign = false
	# template = ~/.gitmessage
[credential]
	helper = osxkeychain
[diff]
	wsErrorHighlight = new
	mnemonicprefix = true
	algorithm = histogram
[diff "exif"]
	textconv = exiftool -s -G --File:FileModifyDate --File:FileInodeChangeDate --File:Directory --File:FileName --File:FileAccessDate --PNG:ModifyDate --PNG:Datecreate --PNG:Datemodify
[diff "plist"]
	textconv = plutil -convert xml1 -o -
[diff "swift"]
	xfuncname = "^ *(\\w+ +)*((class|struct|enum|protocol|extension|func) +|(de)?init\\b).*$"
[difftool]
	prompt = false
[fetch]
	prune = true
[grep]
	lineNumber = true
	extendRegexp = true
[help]
	autocorrect = 1
[interactive]
	singleKey = true
	#diffFilter = delta --color-only --features=interactive
[merge]
	tool = vimdiff
	guitool = Kaleidoscope
[mergetool]
	prompt = false
	keepBackup = false
[pager]
	#diff = delta
	#log = delta
	#reflog = delta
	#show = delta
[push]
	default = current
	autoSetupRemote = true
[rerere]
	enabled = true
[rebase]
	autostash = true
	autosquash = true
	missingCommitsCheck = warn
[stash]
	showPatch = true
[status]
	showUntrackedFiles = all
	showStash = true
[submodule]
	recurse = true
[alias]
	# list git aliases
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lgtest = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %<(72,trunc) %s %Cgreen(%cd, %cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
	devlog = !git --no-pager log --pretty=format:\"%h %ad | %s%d [%an]\" --date=short develop..$(git branch-name)
	d = difftool
	diff-highlight = "!f() { git diff \"$@\" | ~/bin/diff-highlight; }; f" --color | less
	# Get the current branch name (not so useful in itself, but used in other aliases)
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	# Current branch url encoded
	# Rev and cut are to remove trailing whitespace since git is using #/bin/sh, also exta / added to sed
	# If running from bash we could remove rev/cut and use echo -ne
	# https://stackoverflow.com/a/55576846
	branch-urlencode = !echo $(git rev-parse --abbrev-ref HEAD) | xxd -plain | rev | cut -c3- | rev | tr -d '\n' | sed 's/\\(..\\)/%\\1/g'
	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push --set-upstream origin $(git branch-name)"
	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"
	safe-force = push --force-with-lease
	# The first commit of a repository can not be rebased like regular commits,
	# so it’s good practice to create an empty commit as your repository root.
	it = !git init && git commit -m “root” --allow-empty
	# List your most recently-used branches using Git
	# http://ses4j.github.io/2020/04/01/git-alias-recent-branches/
	lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'
	fix-conflicts = "!$EDITOR `git diff --name-only --diff-filter=U`"
	# update develop branch from remote even if on a different branch
	update-develop = "!git fetch origin develop:develop"
	gone-old = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs  git branch -D | echo \"Done.\"
	# delete local branches merged to remote
	# https://stackoverflow.com/questions/6127328/how-do-i-delete-all-git-branches-which-have-been-merged
	gone = ! git branch --merged | egrep -v \"(^\\*|master|main|dev)\" | xargs git branch -d
	# clean untracked files, saving them to a detached commit, aborting if any are over 100MB
	clean-savepoint = "!f(){ \
		threshold=100M; \
		if git ls-files --others --exclude-standard -z | \
		xargs -0 -n1 find '{}' -maxdepth 0 -size +${threshold} -print -quit | \
		grep -q .; then \
		echo \"🚫 Error: untracked file > ${threshold} detected.\" >&2; \
		return 1; \
		fi; \
		git add -A; \
		git commit -qm \"CLEAN SAVEPOINT\" --no-verify; \
		git reset --hard HEAD~1; \
		echo \"✅ Clean complete (savepoint in reflog).\"; \
		}; f"
[delta]
	features = decorations
	#plus-style = "syntax #012800"
	#minus-style = "syntax #340001"
	syntax-theme = zenburn
	navigate = true
	line-numbers = true
	colorMoved = default
	whitespace-error-style = 22 reverse
[delta "decorations"]
	commit-decoration-style = blue ol
	commit-style = raw
	file-style = omit
	hunk-header-decoration-style = blue box
	hunk-header-line-number-style = "#067a00"
	hunk-header-style = file line-number syntax
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[include]
	path = ~/.gitconfig.work
