if [ -f ~/.workalias ]; then
    . ~/.workalias
fi

if [ -f ~/.alias_local ]; then
    . ~/.alias_local
fi

if [ -f ~/.alias.local ]; then
    . ~/.alias.local
fi

## general
alias l='ls'
alias lsa='ls -A'
alias lsg='ls -goAh'
alias lsd='ls -d */'
alias lsb='ls ~/bin'
alias ls.='ls -lA | tr -s " " | cut -d " " -f 9-20 | grep ^[.]'
alias c='clear'
alias v=$EDITOR
alias e=$EDITOR
alias mvim='mvim -v'
alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias c3='cal -3'
alias cdg='cd ~/git'
alias cdd='cd ~/git/dot-files/'
alias cdv='cd ~/.vim'
alias h='history'
alias myhelp='cat ~/git/dot-files/help/shell.txt'
alias killlast='kill -9 %%'
alias info='info --vi-keys'

alias ea='$EDITOR ~/.alias && source ~/.alias'
alias et='vim ~/git/dot-files/todo.txt'
alias ein='$EDITOR ~/.inputrc && bind -f ~/.inputrc && echo "Loaded new entries, old entries persist, <C-x><C-r> to reload .inputrc"'

alias tcopy="tr -d '\n' | pbcopy"
alias grep="grep --color=always"
alias irc="irssi"

# Almquist shell
if [ "$SHELL" = "/bin/ash" ]; then
    alias ls='ls --color=auto'
    unalias lsa
    alias lsa='ls -A'
fi

# bluetooth
alias bton="blueutil --power 1"
alias btoff="blueutil --power 0"

# make and change directory
mcd () { mkdir -p $1; cd $1; }

# perform ls after cd
cdl () { cd "$@" && ls; }

# defaults
alias dfr='defaults read'
alias dfw='defaults write'

enable_sudo_touchid () {
    sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
}

alias gitx='open -a GitX .'

## git alias
alias git-short-sha='git rev-parse --short HEAD'
alias git-current-branch='git rev-parse --abbrev-ref HEAD'
alias eg='git config -e'
alias egg='git config --global -e'
alias g='git '
alias gs='git status '
alias ga='git add '
alias gaa='git add -A'
alias gap='git add -p'
alias gai='git add -i '
# add all tracked files
alias gat='git add -u'
alias gb='git branch -l --format="%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:short)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)" --color=always | column -ts"|" | grep -v old'
alias gbb='git branch --all -vv'
alias gbm='git branch --merged'
alias gbmn='git branch --no-merged'
alias gbc='git rev-parse --abbrev-ref HEAD '
# rename current branch to a different name
alias gbr='git branch -m $(git rev-parse --abbrev-ref HEAD) '
# show only remote tags
alias gtr='git ls-remote --tags origin'
alias gc='git commit -m '
alias gcam='git commit -a -m '
alias gca='git commit --amend'
alias gf='git fetch --all'
# open all conflict files in editor
alias gfix='$EDITOR `git diff --name-only | uniq`'
alias gd='git diff'
alias gds='git diff --staged'
# alias gdc='git diff --word-diff-regex=.'
alias gdc='git diff --cached'
alias go='git checkout '
alias gon='git_checkout_branch_n'
alias gom='git checkout master '
alias god='git checkout develop '
alias gob='git checkout -B '
# not intended to be called directly. Copy text with jira ticket and expand this command to
# populate the prompt with a new branch template
alias gobj='git checkout -B $(echo "$(pbpaste)" | command grep -Eo "[A-Z]+-\d+")/'
alias gp='git pull '
alias gpu='git push'
alias gput='git push origin --tags'
# push to remote and set upstream at the same time https://stackoverflow.com/a/6089415/640338
alias gpusu='git push -u origin HEAD'
alias gpu1='git push origin HEAD^:$(git rev-parse --abbrev-ref HEAD)'
alias gpu2='git push origin HEAD^^:$(git rev-parse --abbrev-ref HEAD)'
alias gm='git merge '
alias gmm='git merge origin master '
alias gms='git merge --squash '
alias gl='git log'
alias glp='git log -p'
alias gcf='git commit --patch --fixup'
# todo: make a function to apply a fixup and then rebase it
# git rebase -i --committer-date-is-author-date `git rev-parse 0d3290d1^`
alias gcp='git cherry-pick '
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'
alias grbsk='git rebase --skip'
# alias grb1='git reset --soft HEAD^'
# alias grb2='git reset HEAD .'
# git rebase split
alias grbs='git reset HEAD^'
# safe git reset hard avoiding commit hooks
alias grh='git add -A && git commit -qm "WIPE SAVEPOINT" --no-verify && git reset HEAD~1 --hard'
alias gwipe='git add -A && git commit -qm "WIPE SAVEPOINT" && git reset HEAD~1 --hard'
# delete untracked files; dry run and actual
alias gclean='git clean -d -n'
alias gcleann='git clean -d -f'
alias gmt='git mergetool '
alias gg='git grep '

# git rebase
alias grb='git rebase -i --committer-date-is-author-date'
alias grbh='git rebase -i $H'
alias grbd='git rebase -i --committer-date-is-author-date develop'
alias grbc='git rebase --continue'
alias grba='git rebase --abort'
# set $H to common ancestor of HEAD and develop
alias grbshb='grbsh `git merge-base develop HEAD`'
# set $H (hash) for grbh
grbsh() { export H="$1"; }
# Function to take git interactive rebase argument. e.g.: grbn 2
grbn() { git rebase -i HEAD~$1; }
alias mg='meta git '
alias me='meta exec '
alias mgs='meta git status'

# git stash
alias gst='git stash --include-untracked'
alias gstl='git --no-pager stash list --pretty=format:"%C(red)%h%C(reset) - %C(dim yellow)(%C(bold magenta)%gd%C(dim yellow))%C(reset) %<(70,trunc)%s %C(green)(%cr) %C(bold blue)<%an>%C(reset)" && echo'
alias gstn='git stash save'
alias gstnp='git stash save -p'
alias gstp='git stash pop'
alias gsta='git_stash_apply'
alias gsta0='git stash apply stash@{0}'
alias gstd='git_stash_drop '
alias gstd0='git stash drop stash@{0}'
alias gsts='git_stash_show '
git_stash_apply () { git stash apply stash@{"$1"}; }
git_stash_drop () { git stash drop stash@{"$1"}; }
git_stash_show () { git stash show stash@{"$1"}; }

alias myip='ifconfig en0'
alias pu='pod repo update'
# gatekeeper, code signing
# https://disable-gatekeeper.github.io
alias unquarantine='xattr -dr com.apple.quarantine'

# wifi on/off
alias wifi="networksetup -setairportpower en0"
alias wifiToggle="wifi off && sleep 10 && wifi on"

# kill Xcode and nuke derived data
alias nukederiveddata='rm -rf $HOME/Library/Developer/Xcode/DerivedData'
alias killxcode='killall - Xcode && nukederiveddata'
# Close Xcode and simulators kill $(ps aux | grep 'Xcode' | awk '{print $2}')
alias killsimulator='sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService'
alias cd-provisioning-profiles='cd ~/Library/MobileDevice/Provisioning\ Profiles/'
simInfo () {
    echo "iPhone 12 Pro"
    echo "iPhone XS"
    echo "iPhone X"
    echo "iPad Air 5"
    echo "iPad Air 2"
    echo "Apple TV 4k (at 1080p)"
}

alias beep="echo -ne '\007'"

SPONSOR_BLOCK="--sponsorblock-mark default --sponsorblock-remove sponsor"
TITLE_FORMAT="-o \"%(channel)s - %(title)s [%(id)s].%(ext)s\""
alias ytdlp720="yt-dlp --no-check-certificate -f 'bestvideo[height<=720]+bestaudio' $TITLE_FORMAT $SPONSOR_BLOCK"
alias ytdlp1080="yt-dlp --no-check-certificate -f 'bestvideo[height<=1080]+bestaudio' $TITLE_FORMAT $SPONSOR_BLOCK"
alias ytdlpmp3="youtube-dl -f bestaudio --extract-audio --audio-format mp3 \"%(channel)s - %(title)s [%(id)s].%(ext)s\""

alias colorPicker="osascript -e 'choose color' &"
alias termColorsZSH='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+"\n"}; done'
termColorsBash() {
    T='gYw'   # The test text
    echo -e "\n                40m   41m   42m   43m   44m   45m   46m   47m";

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
        '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
        '  36m' '1;36m' '  37m' '1;37m';
        do FG=${FGs// /}
            echo -en " $FGs \033[$FG  $T  "
            for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG $T \033[0m";
            done
            echo;
        done
        echo
}
termColors256() {
    i=0
    while
        printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
        if [ "$i" -eq 15 ] || [ "$i" -gt 15 ] && [ $(($((i-15)) % 6)) -eq 0 ]
        then
            printf "\n";
        fi
        i="$((i+1))"
        [ "$i" -lt 256 ]
    do :; done
}
termTextStyles() {
    printf "\e[0mregular\n"
    printf "\e[1mbold\n\e[0m"
    printf "\e[2mdim\n\e[0m"
    printf "\e[3mitalic\n\e[0m"
    printf "\e[4munderlined\n\e[0m"
    printf "\e[5mblink\n\e[0m"
    printf "\e[7minverted\n\e[0m"
    printf "hidden: \e[8msecret!\n\e[0m"
    printf "\e[9mstrikethrough\n\e[0m"
}
termColorsAnsi() {
    echo -e "\033[0mNC\t\033[0;1mBOLD_NC"
    echo -e "\033[0;30mBLACK\t\033[1;30mBOLD_BLACK"
    echo -e "\033[0;31mRED\t\033[1;31mBOLD_RED"
    echo -e "\033[0;32mGREEN\t\033[1;32mBOLD_GREEN"
    echo -e "\033[0;33mYELLOW\t\033[1;33mBOLD_YELLOW"
    echo -e "\033[0;34mBLUE\t\033[1;34mBOLD_BLUE"
    echo -e "\033[0;35mMAGENTA\t\033[1;35mBOLD_MAGENTA"
    echo -e "\033[0;36mCYAN\t\033[1;36mBOLD_CYAN"
    echo -e "\033[0;37mWHITE\t\033[1;37mBOLD_WHITE"
}
termami() {
    if hash tput 2>/dev/null; then
        echo "columns: $(tput cols) rows: $(tput lines)"
    elif hash stty  2>/dev/null; then
        echo "columns: $(stty size | cut -d " " -f2) rows: $(stty size | cut -d " " -f1)"
    else
        echo "tput and stty are not installed"
    fi
    echo "VT100 size 80x24"
    env | \grep ^TERM
}

# for repeating the last command
# see http://stackoverflow.com/questions/4956018/in-git-how-can-i-stage-a-file-i-have-just-diffed-without-manually-specifying-the/4956417#4956417
# $ cc
# $ r sudo # would execute r cc
alias r='fc -s'

# read -p "Are you sure? " -n 1 -r
# echo    # (optional) move to a new line
# if [[ $REPLY =~ ^[Yy]$ ]]
# then
#   # do dangerous stuff
# fi

# alias tail_ls="ls -l $1 | tail"

gdelbn () {
    if [ $# -eq 0 ]
    then
        echo "No arguments supplied"
        return
    fi
    branchToDelete=$(git branch | sed -n "$1"p)
    read -p "Will delete branch $branchToDelete. Proceed? (Enter) - (^C to abort)"
    git branch -D $branchToDelete;
}

# from `git branch` check out branch N
git_checkout_branch_n () {
    git checkout `git branch | sed -n "$1"p`;
}

# Show the Nth commit in the project
hockeyNumberToHash() {
    re='^[0-9]+$'
    if ! [[ $1 =~ $re ]] ; then
        echo "error: Not a number" >&2; return
    fi
    totalCommits=$(git rev-list HEAD --count)
    reverseCommit=$(expr $totalCommits - "$1") # the following command skips from HEAD backwards so we need to find the number of commits from HEAD
    echo Total commits: $totalCommits, Commits behind HEAD: $reverseCommit
    git log --skip=$reverseCommit --max-count=1
}

hockeyHashToNumber() {
    if test $(git cat-file -t $1) == commit; then
        totalCommits=$(git rev-list HEAD --count)
        thisCommit=$(git rev-list "$1" --count)
        reverseCommit=$(expr $totalCommits - $thisCommit) # the following command skips from HEAD backwards so we need to find the number of commits from HEAD
        echo Total commits: $totalCommits, Commit behind HEAD: $reverseCommit, Commit number: $thisCommit
    else
        echo "error: Input not a commit" >&2; return
    fi
}

# get current branch "TICKET-123/aBranchDescription" and return "TICKET-123"
alias ticket-number-of-current-branch='git-current-branch | sed -e "s/\/.*$//g"'
alias openticket-of-current-branch='open $JIRA_INSTANCE_URL`ticket-number-of-current-branch`'

# http://unix.stackexchange.com/questions/97920/how-to-cd-automatically-after-git-clone
# if cloning, cd into directory after clone is completed
# git()
# {
#    local tmp=$(mktemp)
#    local repo_name
#
#    if [ "$1" = clone ] ; then
#      /usr/bin/git "$@" | tee $tmp
#      repo_name=$(awk -F\' '/Cloning into/ {print $2}' $tmp)
#      rm $tmp
#      printf "changing to directory %s\n" "$repo_name"
#      cd "$repo_name"
#    else
#      /usr/bin/git "$@"
#    fi
# }

#function lazyclone {
#    url=$1;
#    reponame=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
#    git clone $url $reponame;
#    cd $reponame;
#}

gclone() {
  git clone "$1" && cd "$(basename "$1" .git)"
}

#### Get os name via uname ###
#_myos="$(uname)"

#### add alias as per os using $_myos ###
#case $_myos in
#   Linux) alias foo='/path/to/linux/bin/foo';;
#   FreeBSD|OpenBSD) alias foo='/path/to/bsd/bin/foo' ;;
#   SunOS) alias foo='/path/to/sunos/bin/foo' ;;
#   Darwin) alias foo='' ;;
#   *) ;;
#esac

# show man for the nth listing in /usr/bin based on the offset of startDate
dailyman() {
    startDate="2020-05-15"
    offset=$(dateDiff $startDate)
    commandNum="${offset}p"
    commandName=$( ls /usr/bin | sed -n $commandNum)
    total=$( ls /usr/bin | wc -l )
    man $commandName
    echo day $offset of $total, $commandName
}

# return the nth builtin command of the offset of startDate
dailybuiltin() {
    startDate="2020-05-20"
    total=$( compgen -b | wc -l )
    offset=$(dateDiff $startDate)
    offset=$(( offset % total ))
    commandNum="${offset}p"
    todaysCommand=$(compgen -b | sed -n $commandNum)
    echo "day $offset of $total, $todaysCommand:   info | man | help"
}

# takes a date string in the format "yyyy-mm-dd" and returns the number
# of days to now
dateDiff() {
    if [ $# -eq 0 ]
    then
        echo "No arguments supplied"
        return
    fi

    startDate="$1"
    start_ts=0
end_ts=0
if [ "$(uname)" == "Darwin" ]; then
    start_ts=$(date -j -f "%Y-%m-%d" ${startDate} +"%s")
end_ts=$(date +"%s")
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    start_ts=$(date -d ${startDate} '+%s')
end_ts=$(date -d `date +%F` '+%s')
fi
offset_ts=$(expr $end_ts - $start_ts)
offset=$(( $offset_ts/(60*60*24) ))
echo $offset
}

alias vimp='rm profile.log && vim ~/.vimrc --startuptime profile.log'
alias profvim="rm profile.log & vim --cmd 'profile start profile.log' --cmd 'profile func *' --cmd 'profile file *' -c 'profdel func *' -c 'profdel file *' ~/git/dot-files/todo.txt"

copyssh() {
    if [ "$(uname)" == "Darwin" ]; then
        cat ~/.ssh/id_rsa.pub | pbcopy
    elif [ "$(uname)" == "Linux" ]; then
        if [ -e "/dev/clipboard" ] ; then
            cat ~/.ssh/id_rsa.pub > /dev/clipboard
        else
            echo "/dev/clipboard does not exist"
        fi
    else
        echo "unknown"
    fi
}

alias whatami='systemInfoADM'
systemInfoADM() {
    if [[ "$(uname)" == "Darwin" ]]; then
        printf "Mac OS X 10.0    Cheetah         March 24, 2001\n"
        printf "Mac OS X 10.1    Puma            September 25, 2001\n"
        printf "Mac OS X 10.2    Jaguar          August 24, 2002\n"
        printf "Mac OS X 10.3    Panther         October 24, 2003\n"
        printf "Mac OS X 10.4    Tiger           April 29, 2005\n"
        printf "Mac OS X 10.5    Leopard         October 26, 2007\n"
        printf "Mac OS X 10.6    Snow Leopard    August 28, 2009\n"
        printf "Mac OS X 10.7    Lion            July 20, 2011\n"
        printf "OS X     10.8    Mountain Lion   July 25, 2012\n"
        printf "OS X     10.9    Mavericks       October 22, 2013\n"
        printf "OS X     10.10   Yosemite        October 16, 2014\n"
        printf "OS X     10.11   El Capitan      September 30, 2015\n"
        printf "macOS    10.12   Sierra          September 20, 2016\n"
        printf "macOS    10.13   High Sierra     September 25, 2017\n"
        printf "macOS    10.14   Mojave          September 24, 2018\n"
        printf "macOS    10.15   Catalina        October 7, 2019\n"
        printf "macOS    11.0    Big Sur         November 12, 2020\n"
        printf "macOS    12.0    Monterey        October 25, 2021\n"
        printf "macOS    13.0    Ventura         October 24, 2022\n"
        printf "macOS    14.0    Sonoma          September 26, 20023\n"
        printf "=====================================================\n"
        # https://apple.stackexchange.com/a/333470
        MARKETING_NAME=$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')
        printf "MarketingName:\t\t$MARKETING_NAME\n"
        sw_vers
        uname -a
    elif [ "$(uname)" = "Linux" ]; then
        # https://stackoverflow.com/a/246012 get true 32/64 bit info
        echo "Installed OS is $(getconf LONG_BIT) bit"
        uname -a
        cat /etc/os-release
        cat /proc/device-tree/model
        hostnamectl
    else
        echo "update system_info function to handle this system: $(uname)"
    fi
}

clink() {
    if [ $# -eq 0 ]; then
        echo "No arguments supplied"
        return 1
    fi

    for var in "$@"
    do
        file="$var"
        if [ ! -f "$file" ] && [ ! -d "$file" ]; then
            echo "File doesn't exist"
            return 1
        fi

        # only create folder if it doesn't exist
        mkdir -p ~/.bak

        # if file is a symlink
        notSymlink=true
        if [ -L ~/$file ]; then
            notSymlink=false
        fi

        # if file already exists, move it .bak
        if [ -e ~/$file -a $notSymlink = true ]; then
            cp ~/$file ~/.bak
            rm ~/$file
        fi

        # symlinking a folder
        if [ -d "$file" ]; then
            ln -sf $(pwd)/$file $HOME/$(dirname $file)
            return
        fi

        ln -sf $(pwd)/$file $HOME/$file
    done
}

extract () {
    if [ ! -f "$1" ] ; then
        echo "'$1' does not exist."
        return 1
    fi

    case "$1" in
        *.tar.bz2)   tar xvjf "$1"   ;;
        *.tar.xz)    tar xvJf "$1"   ;;
        *.tar.gz)    tar xvzf "$1"   ;;
        *.bz2)       bunzip2 "$1"    ;;
        *.rar)       rar x "$1"      ;;
        *.gz)        gunzip "$1"     ;;
        *.tar)       tar xvf "$1"    ;;
        *.tbz2)      tar xvjf "$1"   ;;
        *.tgz)       tar xvzf "$1"   ;;
        *.zip)       unzip "$1"      ;;
        *.Z)         uncompress "$1" ;;
        *.xz)        xz -d "$1"      ;;
        *.7z)        7z x "$1"       ;;
        *.a)         ar x "$1"       ;;
        *)           echo "Unable to extract '$1'." ;;
    esac
}

universalHelp () {
    help_dir="$HOME/git/dot-files/help/"
    default_help="$help_dir"shell.txt

    # No argument, edit default help
    if [ $# -eq 0 ] ; then
        $EDITOR "$default_help"
        return 0
    fi

    # Have argument, try to load relevant help
    file_path="$help_dir$1.txt"
    if [ -f $file_path ] ; then
        $EDITOR $file_path
        return 0
    fi

    $EDITOR "$default_help"
}

noti() {
    if [ "$(uname)" = "Darwin" ]; then
        if [ $? -eq 0 ]; then
            afplay /System/Library/Sounds/Blow.aiff -v 10
        else
            printf '\a'
        fi
    else
        printf '\a'
    fi
}

# vim: filetype=sh
