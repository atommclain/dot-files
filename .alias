if [ -f ~/.workalias ]; then
	source ~/.workalias
fi

## general
alias l='ls'
alias lsa='ls -goah'
alias lsd='ls -d */'
alias lsb='ls ~/bin'
alias ls.='ls -a | grep "^\."'
alias c='clear'
alias v=$EDITOR
alias e=$EDITOR
alias mvim='mvim -v'
alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias cdg='cd ~/git'
alias cdd='cd ~/git/dot-files/'
alias cdv='cd ~/.vim'
alias h='history'
alias myhelp='cat ~/git/dot-files/shellReminders.txt'
alias killlast='kill -9 %%'

alias ea='$EDITOR ~/.alias && source ~/.alias'
alias et='vim ~/git/dot-files/todo.txt'
alias ein='$EDITOR ~/.inputrc && bind -f ~/.inputrc && echo "Loaded new entries, old entries persist, <C-x><C-r> to reload .inputrc"'

alias tcopy="tr -d '\n' | pbcopy"
alias grep="grep --color=always"
alias irc="irssi"

# bluetooth
alias bton="blueutil --power 1"
alias btoff="blueutil --power 0"

# make and change directory
function mcd () { mkdir -p $1; cd $1; }

# perform ls after cd
function cdl () { cd "$@" && ls; }

# defaults
alias dfr='defaults read'
alias dfw='defaults write'

enable-sudo-touchid() {
    sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
}

alias gitx='open -a GitX .'

## git alias
alias git-short-sha='git rev-parse --short HEAD'
alias git-current-branch='git rev-parse --abbrev-ref HEAD'
alias eg='git config -e'
alias egg='git config --global -e'
alias g='git '
alias gs='git status '
alias ga='git add '
alias gaa='git add .'
alias gap='git add -p'
alias gai='git add -i '
alias gb='git branch --all -vv'
alias gbc='git rev-parse --abbrev-ref HEAD '
alias gc='git commit -m '
alias gcam='git commit -a -m '
alias gca='git commit --amend'
alias gf='git fetch --prune'
# open all conflict files in editor
alias gfix='$EDITOR `git diff --name-only | uniq`'
alias gd='git diff'
alias gds='git diff --staged'
# alias gdc='git diff --word-diff-regex=.'
alias gdc='git diff --cached'
alias go='git checkout '
alias gon='git_checkout_branch_n'
alias gom='git checkout master '
alias god='git checkout develop '
alias gob='git checkout -B '
# not intended to be called directly. Copy text with jira ticket and expand this command to
# populate the prompt with a new branch template
alias gobj='git checkout -B $(echo "$(pbpaste)" | command grep -Eo "[A-Z]+-\d+")/'
alias gp='git pull '
alias gpu='git push'
# push to remote and set upstream at the same time https://stackoverflow.com/a/6089415/640338
alias gpusu='git push -u origin HEAD'
alias gpu1='git push origin HEAD^:$(git rev-parse --abbrev-ref HEAD)'
alias gpu2='git push origin HEAD^^:$(git rev-parse --abbrev-ref HEAD)'
alias gm='git merge '
alias gmm='git merge origin master '
alias gms='git merge --squash '
alias gl='git log'
alias gcp='git cherry-pick '
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'
alias grbsk='git rebase --skip'
# alias grb1='git reset --soft HEAD^'
# alias grb2='git reset HEAD .'
# git rebase split
alias grbs='git reset HEAD^'
# safe git reset hard avoiding commit hooks
alias grh='git add -A && git commit -qm "WIPE SAVEPOINT" --no-verify && git reset HEAD~1 --hard'
alias gwipe='git add -A && git commit -qm "WIPE SAVEPOINT" && git reset HEAD~1 --hard'
alias gmt='git mergetool '
alias gg='git grep '

# git rebase
alias grb='git rebase -i'
alias grbh='git rebase -i $H'
alias grbd='git rebase -i develop'
alias grbc='git rebase --continue'
alias grba='git rebase --abort'
# set $H to common ancestor of HEAD and develop
alias grbshb='grbsh `git merge-base develop HEAD`'
# set $H (hash) for grbh
function grbsh { export H="$1"; }
# Function to take git interactive rebase argument. e.g.: grbn 2
grbn() { git rebase -i HEAD~$1; }

# git stash
alias gst='git stash --include-untracked'
alias gstl='git --no-pager stash list --pretty=format:"%C(red)%h%C(reset) - %C(dim yellow)(%C(bold magenta)%gd%C(dim yellow))%C(reset) %<(70,trunc)%s %C(green)(%cr) %C(bold blue)<%an>%C(reset)" && echo'
alias gstn='git stash save'
alias gstnp='git stash save -p'
alias gstp='git stash pop'
alias gsta='git_stash_apply'
alias gsta0='git stash apply stash@{0}'
alias gstd='git_stash_drop '
alias gstd0='git stash drop stash@{0}'
alias gsts='git_stash_show '
function git_stash_apply () { git stash apply stash@{"$1"}; }
function git_stash_drop () { git stash drop stash@{"$1"}; }
function git_stash_show () { git stash show stash@{"$1"}; }

alias myip='ifconfig en0'
alias pu='pod repo update'
# gatekeeper, code signing
alias unquarantine='xattr -d com.apple.quarantine'

# wifi on/off
alias wifi="networksetup -setairportpower en0"
alias wifiToggle="wifi off && sleep 10 && wifi on"

# kill Xcode and nuke derived data
alias nukederiveddata='rm -rf $HOME/Library/Developer/Xcode/DerivedData'
alias killxcode='killall - Xcode && nukederiveddata'
alias killsimulator='sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService'
alias cd-provisioning-profiles='cd ~/Library/MobileDevice/Provisioning\ Profiles/'
function simInfo () {
    echo "iPhone 12 Pro"
    echo "iPhone XS"
    echo "iPhone X"
    echo "iPad Air 2"
}

alias beep="echo -ne '\007'"

alias colorPicker="osascript -e 'choose color' &"
alias termColors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+"\n"}; done'
# for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done

# for repeating the last command
# see http://stackoverflow.com/questions/4956018/in-git-how-can-i-stage-a-file-i-have-just-diffed-without-manually-specifying-the/4956417#4956417
# $ cc
# $ r sudo # would execute r cc
alias r='fc -s'

# read -p "Are you sure? " -n 1 -r
# echo    # (optional) move to a new line
# if [[ $REPLY =~ ^[Yy]$ ]]
# then
#   # do dangerous stuff
# fi

# alias tail_ls="ls -l $1 | tail"

function gdelbn () {
	if [ $# -eq 0 ]
	then
		echo "No arguments supplied"
		return
	fi
	branchToDelete=$(git branch | sed -n "$1"p)
	read -p "Will delete branch $branchToDelete. Proceed? (Enter) - (^C to abort)"
	git branch -D $branchToDelete;
}

# from `git branch` check out branch N
function git_checkout_branch_n () {
	git checkout `git branch | sed -n "$1"p`;
}

# Show the Nth commit in the project
function hockeyNumberToHash() {
	re='^[0-9]+$'
	if ! [[ $1 =~ $re ]] ; then
		echo "error: Not a number" >&2; return
	fi
	totalCommits=$(git rev-list HEAD --count)
	reverseCommit=$(expr $totalCommits - "$1") # the following command skips from HEAD backwards so we need to find the number of commits from HEAD
	echo Total commits: $totalCommits, Commits behind HEAD: $reverseCommit
	git log --skip=$reverseCommit --max-count=1
}

function hockeyHashToNumber() {
	if test $(git cat-file -t $1) == commit; then
		totalCommits=$(git rev-list HEAD --count)
		thisCommit=$(git rev-list "$1" --count)
		reverseCommit=$(expr $totalCommits - $thisCommit) # the following command skips from HEAD backwards so we need to find the number of commits from HEAD
		echo Total commits: $totalCommits, Commit behind HEAD: $reverseCommit, Commit number: $thisCommit
	else
		echo "error: Input not a commit" >&2; return
	fi
}

# get current branch "TICKET-123/aBranchDescription" and return "TICKET-123"
alias ticket-number-of-current-branch='git-current-branch | sed -e "s/\/.*$//g"'
alias openticket-of-current-branch='open $JIRA_INSTANCE_URL`ticket-number-of-current-branch`'

# http://unix.stackexchange.com/questions/97920/how-to-cd-automatically-after-git-clone
# if cloning, cd into directory after clone is completed
# git()
# {
#    local tmp=$(mktemp)
#    local repo_name
#
#    if [ "$1" = clone ] ; then
#      /usr/bin/git "$@" | tee $tmp
#      repo_name=$(awk -F\' '/Cloning into/ {print $2}' $tmp)
#      rm $tmp
#      printf "changing to directory %s\n" "$repo_name"
#      cd "$repo_name"
#    else
#      /usr/bin/git "$@"
#    fi
# }

#function lazyclone {
#    url=$1;
#    reponame=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
#    git clone $url $reponame;
#    cd $reponame;
#}

#### Get os name via uname ###
#_myos="$(uname)"

#### add alias as per os using $_myos ###
#case $_myos in
#   Linux) alias foo='/path/to/linux/bin/foo';;
#   FreeBSD|OpenBSD) alias foo='/path/to/bsd/bin/foo' ;;
#   SunOS) alias foo='/path/to/sunos/bin/foo' ;;
#   Darwin) alias foo='' ;;
#   *) ;;
#esac

# show man for the nth listing in /usr/bin based on the offset of startDate
function dailyman() {
	startDate="2020-05-15"
	offset=$(dateDiff $startDate)
	commandNum="${offset}p"
	commandName=$( ls /usr/bin | sed -n $commandNum)
    total=$( ls /usr/bin | wc -l )
	man $commandName
	echo day $offset of $total, $commandName
}

# return the nth builtin command of the offset of startDate
function dailybuiltin() {
	startDate="2020-05-20"
	offset=$(dateDiff $startDate)
	commandNum="${offset}p"
	todaysCommand=$(compgen -b | sed -n $commandNum)
    total=$( compgen -b | wc -l )
	echo "day $offset of $total, $todaysCommand:   info | man | help"
}

# takes a date string in the format "yyyy-mm-dd" and returns the number
# of days to now
function dateDiff() {
	if [ $# -eq 0 ]
	then
		echo "No arguments supplied"
		return
	fi

	startDate="$1"
	start_ts=0
	end_ts=0
	if [ "$(uname)" == "Darwin" ]; then
		start_ts=$(date -j -f "%Y-%m-%d" ${startDate} +"%s")
		end_ts=$(date +"%s")
	elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
		start_ts=$(date -d ${startDate} '+%s')
		end_ts=$(date -d `date +%F` '+%s')
	fi
	offset_ts=$(expr $end_ts - $start_ts)
	offset=$(( $offset_ts/(60*60*24) ))
	echo $offset
}

alias vimp='rm profile.log && vim ~/.vimrc --startuptime profile.log'
alias profvim="rm profile.log & vim --cmd 'profile start profile.log' --cmd 'profile func *' --cmd 'profile file *' -c 'profdel func *' -c 'profdel file *' ~/git/dot-files/todo.txt"

alias whatami='systemInfoADM'
function systemInfoADM() {
    if [[ "$(uname)" == "Darwin" ]]; then
        printf "Mac OS X 10.0    Cheetah         March 24, 2001\n"
        printf "Mac OS X 10.1    Puma            September 25, 2001\n"
        printf "Mac OS X 10.2    Jaguar          August 24, 2002\n"
        printf "Mac OS X 10.3    Panther         October 24, 2003\n"
        printf "Mac OS X 10.4    Tiger           April 29, 2005\n"
        printf "Mac OS X 10.5    Leopard         October 26, 2007\n"
        printf "Mac OS X 10.6    Snow Leopard    August 28, 2009\n"
        printf "Mac OS X 10.7    Lion            July 20, 2011\n"
        printf "OS X     10.8    Mountain Lion   July 25, 2012\n"
        printf "OS X     10.9    Mavericks       October 22, 2013\n"
        printf "OS X     10.10   Yosemite        October 16, 2014\n"
        printf "OS X     10.11   El Capitan      September 30, 2015\n"
        printf "macOS    10.12   Sierra          September 20, 2016\n"
        printf "macOS    10.13   High Sierra     September 25, 2017\n"
        printf "macOS    10.14   Mojave          September 24, 2018\n"
        printf "macOS    10.15   Catalina        October 7, 2019\n"
        printf "macOS    11.00   Big Sur         November 12, 2020\n"
        printf "=====================================================\n"
        sw_vers
        uname -a
    elif [ "$(uname)" == "Linux" ]; then
        " https://stackoverflow.com/a/246012 get true 32/64 bit info
        echo "Installed os is $(getconf LONG_BIT)"
        uname -a
        cat /etc/os-release
        cat /proc/device-tree/model
        hostnamectl
    else
        echo "update system_info function to handle this system: $(uname)"
    fi
}

function clink() {
    if [ $# -eq 0 ]; then
        echo "No arguments supplied"
        exit 1
    fi

    FIRST_ARGUMENT="$1"

    # only create folder if it doesn't exist
    mkdir -p ~/.bak

    # if file already exists, move it .bak
    if [ -e  ~/$FIRST_ARGUMENT ]; then
        cp ~/$FIRST_ARGUMENT ~/.bak
        rm ~/$FIRST_ARGUMENT
    fi

    ln -s $(pwd)/$FIRST_ARGUMENT ~/$FIRST_ARGUMENT
}

# vim: filetype=sh
